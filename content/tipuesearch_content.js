var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '各週影片', 'text': '', 'tags': '', 'url': '各週影片.html'}, {'title': 'W15', 'text': '\n', 'tags': '', 'url': 'W15.html'}, {'title': 'W17', 'text': '', 'tags': '', 'url': 'W17.html'}, {'title': '教程2：修改環境翻譯', 'text': 'Webots用戶指南Webots User Guied \n 教程2：修改環境 \n Tutorial 2: Modification of the Environment \xa0 \n \xa0 \n 在本教程中，我們將教您如何在環境中創建簡單對象。 第一步將是創建一個與環境互動的球。 我們將處理與節點有關的幾個概念：它們的含義，如何創建它們，必須如何關聯它們等等。此外，我們還將了解如何設置物理學。 \n In this tutorial, we will teach you how to create simple objects in the environment. The first step will be to create a ball which will interact with the environment. We will tackle several concepts related to the nodes: what is their meaning, how to create them, how they have to be affiliated, etc. Moreover we will see how to set up physics. \n 將介紹幾種節點。 它們的詳細定義可以在參考手冊中找到。 將節點圖表顯示在您的面前，也將有助於理解節點繼承關係 \n Several kinds of nodes will be introduced. Their detailed definition can be found in\xa0 Reference Manual . Having the\xa0 nodes chart diagram \xa0in front of you, will also help understanding the nodes inheritance relationship. \n 指數 Index \n \n 新的模擬 A New Simulation \n 修改地板 Modifying the Floor \n 實體節點 The Solid Node \n 創建一個球 Create a Ball \n 幾何形狀 Geometries \n 定義使用機制 DEF-USE Mechanism \n 添加牆 Add Walls \n 解決方案：世界文件 Solution: World File \n 效率 Efficiency \n 結論 Conclusion \n \n 新的模擬A New Simulation \n 首先，我們根據教程 1 中創建的模擬創建一個新的模擬。 \n First we create a new simulation based on the one created in Tutorial 1. \n 動手操作 1 ：確保打開了 my_first_simulation.wbt 文件，並且模擬已暫停並且處於虛擬時間 0 。使用“文件 / 另存世界為 ... ”菜單，將模擬保存為障礙。 \n Hands-on #1 : Make sure the\xa0my_first_simulation.wbt\xa0world file is open, and that the simulation is paused and is at a virtual time of 0. Using the\xa0File / Save World As...\xa0menu, save the simulation as\xa0obstacles.wbt. \n \n 修改地板 Modifying the Floor \n 默認的 RectangleArena PROTO 定義了一個固定在靜態環境上的簡單地板，即沒有 Physics 節點並且被牆壁包圍。  Webots 對像庫中提供了其他預建樓層。 現在，我們將刪除 RectangleArena 節點，並添加一個簡單的地板，在本教程的後面部分將用牆手動將其包圍。 \n The default\xa0RectangleArena\xa0PROTO defines a simple floor pinned on the static environment, i.e. without\xa0 Physics \xa0node, and surrounded by walls. Other pre-built floors are available in the Webots objects library. We will now delete the\xa0RectangleArena\xa0node and add a simple floor that we will manually surround with walls later in this tutorial. \n 動手操作 2 ：要刪除 RectangleArena ，請在 3D 視圖或場景樹視圖中單擊鼠標左鍵將其選中，然後按鍵盤上的 Delete 鍵。 或者，可以在 3D 視圖中右鍵單擊它，然後在上下文菜單中選擇“刪除”（也可以直接在場景樹視圖中使用上下文菜單）。 選擇 TexturedBackroundLight 節點，然後單擊“添加”按鈕。 在打開的對話框中，然後選擇 PROTO 節點（ Webots 項目） / 對象 / Floors / Floor （實心）。 \n Hands-on #2 : To remove the\xa0RectangleArena, select it either in the 3D view or in the scene tree view with a left click and press the\xa0Delete\xa0key on your keyboard. Alternatively, you can right click on it in the 3D view and select\xa0Delete\xa0in the context menu (you can also use the context menu directly in the scene tree view). Select the\xa0TexturedBackroundLight\xa0node and click on the\xa0Add\xa0button. In the open dialog box, and choose\xa0PROTO nodes (Webots Projects) / objects / floors / Floor (Solid). \n 新添加的 Floor PROTO 的默認大小為 10mx10m ，但是可以通過更改相應的字段來調整其大小，位置和紋理。 \n The newly added\xa0Floor\xa0PROTO has a default size of 10mx10m, but it is possible to adjust its size, its position and texture by changing the corresponding fields. \n 動手＃ 3 ：在場景樹視圖中，選擇並展開“地板”。 修改大小字段並將其設置為 {1 ， 1} 以將其大小調整為 1mx1m 。 \n Hands-on #3 : In the scene tree view select and expand the\xa0Floor. Modify the\xa0size\xa0field and set it to\xa0{1, 1}\xa0to resize it to 1mx1m. \n \n 實體節點 The Solid Node \n 本小節介紹了 Webots 中最重要的基礎節點： Solid 節點，許多其他節點都來自 Solid 節點。 \n This subsection introduces the most important base node in Webots: the\xa0 Solid \xa0node, from which many other nodes derive. \n 實體節點表示剛體，即可以忽略變形的剛體。 剛體上任意兩個給定點之間的距離在時間上保持恆定，而不管施加在其上的外力如何。 例如，桌子，機械手指骨或輪子是剛體。 軟體和關節物體不是剛體。 例如，繩索，輪胎，海綿或關節式機械臂不是剛性體。 但是，可以將一個鉸接的實體分解為幾個剛體。 \n A\xa0 Solid \xa0node represents a\xa0 rigid body , that is a body in which deformation can be neglected. The distance between any two given points of a rigid body remains constant in time regardless of external forces exerted on it. For example a table, a robot finger phalanx or a wheel are rigid bodies. Soft bodies and articulated objects are not rigid bodies. For example, a rope, a tire, a sponge or an articulated robot arm are not rigid bodies. However, an articulated entity can be broken into several rigid bodies. \n Webots 的物理引擎僅設計用於模擬剛體。 設計仿真時，重要的一步是將各個實體分解為單獨的剛體。 \n The physics engine of Webots is designed for simulating rigid bodies only. An important step, when designing a simulation, is to break up the various entities into separate rigid bodies. \n 要定義剛體，您將必須創建一個實體節點。 在此節點內，您將根據剛體的特性設置不同的子節點。 下圖描繪了剛體及其子節點。 實體節點的圖形表示由填充其子級列表的 Shape 節點定義。 碰撞範圍在其 boundingObject 字段中定義。 圖形表示和碰撞形狀通常但不一定相同。 最後，物理字段定義對像是屬於動態環境還是屬於靜態環境。 所有這些子節點都是可選的，但物理場需要定義 boundingObject 。 \n To define a rigid body, you will have to create a\xa0 Solid \xa0node. Inside this node you will set up different sub-nodes corresponding to the characteristics of the rigid body. The following\xa0 figure \xa0depicts a rigid body and its sub-nodes. The graphical representation of the\xa0 Solid \xa0node is defined by the\xa0 Shape \xa0nodes populating its\xa0children\xa0list. The collision bounds are defined in its\xa0boundingObject\xa0field. The graphical representation and the collision shape are often but not necessarily identical. Finally, the\xa0physics\xa0field defines if the object belongs to the dynamical or to the static environment. All these sub-nodes are optional, but the\xa0physics\xa0field needs the\xa0boundingObject\xa0to be defined. \n \n Webots中剛體的最簡單模型，具有圖形表示，物理邊界對象並且處於動態環境中。 \n The simplest model of a rigid body in Webots having a graphical representation, a physical bounding object and being in the dynamical environment. \n 幾何框（在此圖中）代表任何類型的幾何圖元。 實際上，它可以用球體，盒子，圓柱體等代替。 \n The Geometry box (in\xa0 this figure ) stands for any kind of geometrical primitive. In fact, it can be substituted by a\xa0 Sphere , a\xa0 Box , a\xa0 Cylinder , etc. \n \n 創建一個球 Create a Ball \n 現在，我們將球添加到模擬中。 如圖所示，該球將被建模為剛體。 球體節點將用於定義球的幾何形狀。 \n We will now add a ball to the simulation. That ball will be modeled as a rigid body as shown in this\xa0 figure . A\xa0 Sphere \xa0node will be used to define the geometry of our ball. \n 動手＃ 4 ：在場景樹視圖中，選擇最後一個節點，然後按“添加”按鈕。 在對話框中，打開“基礎節點”部分，然後選擇“實體”節點。 在場景樹視圖中，展開“實體”節點並選擇其子字段。 使用“添加”按鈕向其添加一個 Shape 節點。 選擇“形狀”節點的外觀字段，然後使用“添加”按鈕添加一個 PBRAppearance 節點。 \n \n 將球體節點添加為新創建的形狀節點的幾何字段。 \n 展開 PBRAppearance 節點，並將其金屬性字段更改為 0 ，並將其粗糙度字段更改為 1 。 \n 將另一個 Sphere 節點添加到 Solid 的 boundingObject 字段。 \n 最後，將一個 Physics 節點添加到 Solid 的 Physical 字段。 \n 通過修改實體節點的平移字段，將球放置在機器人的前面（例如，在 {0 ， 2 ， -0.2} 處）。 \n 保存模擬。 \n 結果如圖所示。 \n \n Hands-on #4 : In the scene tree view, select the last node and press the\xa0Add\xa0button. In the dialog, open the\xa0Bases nodes\xa0section and select the\xa0 Solid \xa0node. In the scene tree view, expand the\xa0 Solid \xa0node and select its\xa0children\xa0field. Add a\xa0 Shape \xa0node to it by using the\xa0Add\xa0button. Select the\xa0appearance\xa0field of the\xa0 Shape \xa0node and use the\xa0Add\xa0button to add a\xa0PBRAppearance\xa0node. \n \n Add a\xa0 Sphere \xa0node as the\xa0geometry\xa0field of the newly created\xa0 Shape \xa0node. \n Expand the\xa0PBRAppearance\xa0node and change its\xa0metalness\xa0field to 0 and its\xa0roughness\xa0field to 1. \n Add another\xa0 Sphere \xa0node to the\xa0boundingObject\xa0field of the\xa0 Solid . \n Finally add a\xa0 Physics \xa0node to the\xa0physics\xa0field of the\xa0 Solid . \n By modifying the\xa0translation\xa0field of the\xa0 Solid \xa0node, place the ball in front of the robot (at\xa0{0, 0.2, -0.2}\xa0for example). \n Save the simulation. \n The result is depicted in\xa0 this figure . \n \n \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 Webots中的第一個剛體。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 Your first rigid body in Webots. \n \n 當模擬開始時，球擊中地板。 您可以通過向球施加力來移動球（ Ctrl + Alt + 左鍵單擊 + 拖動）。 通過啟用“查看 / 可選渲染 / 顯示接觸點”菜單項，可以將球和地板之間的接觸點顯示為青色線。 \n When the simulation is started, the ball hits the floor. You can move the ball by\xa0 applying a force \xa0to it (Ctrl + Alt + left-click + drag). The contact points between the ball and the floor can be displayed as cyan lines by enabling the\xa0View / Optional Rendering / Show Contact Points\xa0menu item. \n \n', 'tags': '', 'url': '教程2：修改環境翻譯.html'}, {'title': 'NX12翻譯', 'text': '\n 現在我們將擠壓這個多邊形 \n \n 選擇插入→設計特徵→拉伸 \n 選擇要擠出的六角形 \n 輸入結束距離為 1876 英寸 \n \n 擠出後，模型看起來像右圖。 \n \n 在直徑為 387 英寸的圓柱體的頂部， \n \n 插入另一個具有以下尺寸的氣缸。 \n 直徑 = 0.387 英寸 \n 高度 = 0.1875 英寸 \n 由於模型處於“靜態線框”中，因此您只能看到該圓柱體 \n 在六角頭內。 該模型將如下所示。 \n \xa0 \n 現在，我們將使用特徵操作相交。 \n \n 選擇插入→設計特徵→球體 \n 選擇中心點和直徑 \n 選擇最後繪製的圓柱體的底部（該圓柱體位於六角頭內，並且具有 \n \n 直徑 0.387 英寸，高度 0.1875 英寸），如下所示 \n \n 給出 55 作為直徑 \n 在“ Boolean ”對話框中選擇“ Intersect ” \n \n 它將要求您選擇目標實體 \n \n 選擇六角頭 \n 點擊確定 \n \n 如圖所示，這將為您提供六角螺栓。 \n 注意：可以在螺栓帽子上創建此混合功能 \n 也可以通過圍繞其軸的截面旋轉切割， \n 可以嘗試一下。 \n \xa0 \n \xa0 \n 現在，我們將在六角螺栓上添加螺紋。 \n \n 選擇插入→設計特徵→螺紋 \n 單擊詳細單選按鈕 \n 保持旋轉正確 \n 點擊螺栓軸（長六角頭下方的圓柱） \n \n 選擇軸後，所有值將顯示在“線程”窗口中。 保留全部默認值。 \n \n 點擊確定 \n \n 六角螺栓現在應如圖所示 \n 正確的。 保存模型。 \n \n \xa0 \n 4.7.2 六角螺母 \n \n 創建一個新文件並將其另存為 Impeller_hexa-nut.prt \n 選擇插入→曲線→多邊形 \n 輸入的邊數為 6 \n 創建一個六邊形，每邊尺寸為 28685 英寸，並在原點構造 \n 選擇插入→設計特徵→拉伸 \n 選擇要擠出的六角形並輸入末端距離為 125 英寸 \n \n \xa0 \n \xa0 \n \xa0 \n 顯示了模型圖 \n \xa0 \n \xa0 \n \xa0 \n \n 選擇插入→設計特徵→球形 \n 輸入點中的中心點位置對話框窗口如下 \n \n XC = 0; YC = 0; ZC = 0.125 \n \n 輸入直徑值 57 英寸 \n 在布爾運算對話框中，選擇相交並單擊確定 \n \n 該模型將如下所示。 我們現在使用 Mirror 命令創建另一個核心 \n \n 選擇編輯→變換 \n 選擇模型並單擊確定 \n 單擊通過平面鏡像 \n 單擊模型的平面，如圖所示。 注意不要選擇任何邊緣 \n \n \n \xa0 \n \n 點擊確定 \n 點擊複製 \n 點擊取消 \n \n 您將獲得以下模型 \n \n 選擇“插入”→“合併實體”→“合併” \n 選擇兩個部分並將它們合併 \n 插入一個圓柱體，其向量指向 ZC 方向，並且以下內容 \n \n 尺寸： \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0  \n 直徑 = 0.25 英寸 \n 高度 = 1 英寸 \n \n 將圓柱體放在原點上並減去該圓柱體從六角螺母 \n \n 現在，我們將倒角螺母的內部邊緣 \n \n 選擇插入→詳細特徵→倒角 \n 如圖所示，選擇兩個內部邊緣，然後單擊“確定”。 \n 輸入“距離”為 0436 英寸，然後單擊“確定”。 \n \n 您將在螺母上看到倒角。 保存模型。 \n \n \xa0 \n 4.7.3 L-Bar \n 在這裡，我們將利用一些原語和特徵操作，例如 Edge Blend ， Chamfer 和 Subtract 。 應該注意的是，通過 2D 草圖繪製和拉伸可以更有效地創建相同的模型，但是此處使用圖元使用戶熟悉這些功能。 \n \n 創建一個新文件並將其另存為 Arborpress_L-bar \n 選擇插入→設計特徵→塊 \n 創建具有以下尺寸的塊： \n \n 長度 = 65 英寸 \n 寬度 = 65 英寸 \n 高度 = 285 英寸 \n \n 在原點創建塊 \n 創建另一個塊，該塊也放置在具有以下尺寸的原點處： \n \n 長度 = 182 英寸 \n 寬度 = 65 英寸 \n 高度 = 85 英寸 \n 我們必須將第二個塊移到第一個塊的頂部： \n \n 單擊編輯→移動對象 \n 選擇第二個塊（綠色），然後單擊“確定”。 \n 選擇運動作為距離 \n 在“指定向量”對話框中選擇正 ZC \n 輸入 200 作為距離值 \n 確保已選中“移動原件”按鈕，然後單擊“確定”。 \n 單擊“移動”，然後在下一個窗口中單擊“取消”，以便不重複該操作 \n \n \n \xa0 \n 現在我們將創建一個孔。 有幾種創建孔的方法。 我們將首先創建一個圓柱體，然後使用減法函數來實現。 \n \n 選擇插入→設計特徵→氣缸 \n 在“指定向量”上，選擇“  YC 軸”圖標 \n 在“指定點”中，輸入以下值： \n \n XC = 130 YC = -5 ZC = 242 \n \n 圓柱體應具有以下尺寸： \n \n 直徑 = 35 英寸 \n 高度 = 100 英寸 \n \n 在“布爾值”下拉窗口下，選擇“減” \n 選擇頂部的水平塊 \n \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \n \xa0 \n 該孔應看起來像圖中的孔。 現在，我們將創建另一個圓柱體並將其從上方的塊中減去 . \n 圓柱體應指向在以下位置設置的正 Y 方向： XC = 130; YC = 22.5 和 ZC = 242 ，並且應具有以下尺寸：直徑 = 66 英寸； 高度 = 20 英寸 \n \n 使用布爾值下拉菜單從與以前相同的塊中減去此圓柱體 \n \n 現在我們將創建一個塊。 \n \n 選擇插入→設計特徵→塊 \n 創建具有以下尺寸的塊： \n \n 長度 = 25 英寸寬度 = 20 英寸高度 = 150 英寸 \\ \n \n 單擊“起源”框中的“點對話框”圖標，然後輸入以下值： \n \n XC = 157; YC = 22.5 ；  ZC = 180 \n 該模型將看起來像右邊的圖。 現在，我們將從帶有孔的塊中減去該塊。 \n \n 選擇“插入”→“合併實體”→“減去” \n 單擊以兩個孔（綠色）為目標的塊 \n 選擇新創建的塊作為工具 \n 點擊確定 \n \n \xa0 \n 該模型將如圖所示。 現在，我們將在功能操作中使用混合功能。 我們必須首先將兩個區塊結合起來。 \n \n 選擇“插入”→“合併實體”→“合併” \n 單擊兩個塊，然後單擊確定 \n \n 現在將這兩個塊合併為一個實體模型。 \n \n 選擇插入→詳細特徵→邊緣融合 \n 將半徑更改為 60 \n 在兩個塊的界面處選擇邊 \n 點擊確定 \n \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n \xa0 \n 重複相同的步驟以混合圖塊的內部邊緣。 這次，半徑應更改為 30 。 \n 現在，我們將在模型中製作四個孔。 您可以使用“孔”選項創建這些孔。 但是，要練習使用特徵操作，我們將從塊中減去圓柱。 \n \n 分別插入四個氣缸。 它們應指向正 XC 方向，並具有以下尺寸。 \n \n 直徑 = 8 英寸 \n 高度 = 20 英寸 \n \n 在 XC 方向上的以下點坐標處構造它們： \n \n 氣缸＃ 1 ： X = 162; Y = 11.25 ；  Z = 210 \n 氣缸＃ 2 ： X = 162; Y = 11.25 ；  Z = 275 \n 3 號缸： X = 162 ；  Y = 53.75 ；  Z = 210 \n 氣缸 4 ： X = 162; Y = 53.75 ；  Z = 275 \n \n 從布爾值對話框的塊中減去這些圓柱 \n \n 此模型的最後一個操作是創建一個塊並將其從頂部塊中減去。 \n \n 創建具有以下尺寸的塊： \n \n 長度 = 60 英寸寬度 = 20 英寸高度 = 66 英寸 \n \n 在“點”對話框中輸入以下值作為塊的原點 \n \n XC = 130 YC = 22.5 ZC = 209.5 \n \n 創建塊後，從頂部的塊中減去該塊 \n \n 最終的數字將如下所示。 保存並關閉文件。 \n \n \xa0 \n 4.7.4 Rack \n \n 創建一個新的零件文件並將其另存為 prt \n 右鍵單擊，然後選擇“定向視圖”→“等軸測” \n 選擇插入→曲線→矩形 \n \n 點窗口將打開。 注意提示線說明。 提示線提供了下一步需要執行的步驟。 您需要定義矩形的拐角點。 \n 對於角點 1 ， \n \n 輸入坐標 XC = 0 ， YC = 0 ， ZC = 0 ，然後單擊“確定” \n \n 將會彈出另一個 Point Constructor 窗口，您可以定義第二個 Corner Point \n \n 輸入坐標 XC = 240 ， YC = 25 ， ZC = 0 ，然後單擊“確定”，然後單擊“取消” \n 右鍵單擊屏幕，然後選擇 FIT \n \n 注意：創建矩形有三個選項： \n \n 兩點 \n 三點 \n 按中心 \n \n', 'tags': '', 'url': 'NX12翻譯.html'}, {'title': 'Solvespace', 'text': '', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Solvespace 編譯', 'text': '編譯步驟: \n 先將 Y:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe (透過 MSYS2\xa0 執行 shell 指令, 而非 portablegit 中的 sh.exe) \n git version 查驗 git 版本 \n git 2.13 版本以上, 可以使用下列 git clone \xa0 --recurse-submodules 取得所有子模組資料 \n git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace \n 上述指令同: \n git clone\xa0 https://github.com/solvespace/solvespace.git \xa0 \n cd solvespace \n git submodule init \n git submodule update \n edit Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt comment out line 713 and 714 \n #list(APPEND ANGLE_DEFINITIONS #"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \\"d3dcompiler_47.dll\\", \\"d3dcompiler_46.dll\\", \\"d3dcompiler_43.dll\\" }") endif() \n 接著需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即隨身系統的 msys64\\mingw64\\lib 目錄): \n cd solvespace \n cd extlib \n cd libpng \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n (mingw32-make -Wl,-static) \n rename libpng.dll.a to libpng_static.a and copy to Y:\\msys64\\mingw64\\lib \n 接著回到 solvespace 原始碼目錄, 建立 build 目錄後進入 build 目錄, 執行: \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n 編譯完成後, 可以在 build\\bin 目錄中建立 solvespace.exe, 配合相關 dll 檔案後, 即可執行. \n \n \n \n', 'tags': '', 'url': 'Solvespace 編譯.html'}, {'title': 'Solvespace 繪圖', 'text': '\n 1.繪圖驗證-零件5 \n \n 2.繪圖驗證-零件18', 'tags': '', 'url': 'Solvespace 繪圖.html'}]};